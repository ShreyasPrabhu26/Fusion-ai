when doing the conversation page tsx, I was getting an error doing {message.content} stating the type wasnt matching what openai allocated chatcompletionmessageparam has and an error for the key not being unique, here:

div className="space-y-4 mt-4">
        <div className="flex flex-col-reverse gap-y-4">
          {messages.map((message) => (
            <div key={message.content}>
              {message.content}
            </div>
          ))}

        </div>
      </div>


(while it still did work and run on the localhost seemingly fine)
----------

Had to change it to this for it to clear any error in vs code:

<div className="flex flex-col-reverse gap-y-4">
          {messages.map((message, index) => (
            <div key={index}>
              {Array.isArray(message.content)
                ? message.content.map((part, partIndex) => {
                    if ("text" in part) {
                      return <span key={partIndex}>{part.text}</span>;
                    } else {
                      // Handle 'ChatCompletionContentPartImage' case here
                      return null;
                    }
                  })
                : message.content}
            </div>
          ))}
        </div>

This is around the 1:56:37 (https://youtu.be/ffJ38dBzrlY?t=6997) mark
This is also as of 1/10/24 9pm EST any changes after this date may have an effect (doing tutorial will update if any need)

__EXTRA__

How to do routes with new method from openai

        import { OpenAI } from 'openai';

        const openai = new OpenAI({
            apiKey: process.env.OPEN_API_KEY,
        });

-----

How to create new chat completion with new method

        async function main() {
        const completion = await openai.chat.completions.create({
            messages: [{ role: "system", content: "You are a helpful assistant." }],
            model: "gpt-3.5-turbo",
        });

-----

Full post method

        export async function POST(
            req: Request
        ) {
            try {
                const { userId } = auth()
                const body = await req.json()
                const { messages } = body

                if (!userId) {
                    return new NextResponse("Unauthorized", { status: 401 })
                }

                if (!openai.apiKey){
                    return new NextResponse('OpenAI API Key not configured', { status: 500 })
                }

                if (!messages) {
                    return new NextResponse('Messages are required', { status: 400 })
                }

                const response = await openai.chat.completions.create({
                    model: "gpt-3.5-turbo",
                    messages
                })

                return NextResponse.json(response.choices[0].message)
                
            } catch (error) {
                console.log('[CONVERSATION_ERROR', error)
                return new NextResponse('Internal error', { status: 500 })
            }
        }

---

The React Markdown Part using .join method:

<ReactMarkdown
                components={{
                  pre: ({ node, ...props }) => (
                    <div className="overflow-auto w-full mt-2 bg-black/10 p-2 m-5 rounded-lg">
                      <pre {...props} />
                    </div>
                  ),
                  code: ({ node, ...props }) => (
                    <code className="bg-black/10 rounded-lg p-1" {...props} />
                  )
                }}
                className='text-sm overflow-hidden leading-7'
              >
                {Array.isArray(message.content)
                  ? message.content
                      .map((part, partIndex) => {
                        if ("text" in part) {
                          return <span key={partIndex}>{part.text}</span>;
                        } else {
                          // Handle 'ChatCompletionContentPartImage' case here
                          return null;
                        }
                      })
                      .join("")
                  : message.content || ""}
              </ReactMarkdown>

  --------------

  IMAGE GENERATION FIXES

  next config:


  /** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: [
      'oaidalleapiprodscus.blob.core.windows.net'
    ],
  },
}

module.exports = nextConfig


----

API Image route:


import { auth } from "@clerk/nextjs";
import { NextResponse } from "next/server";
import { OpenAI } from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPEN_API_KEY,
});

export async function POST(req: Request) {
  try {
    const { userId } = auth();
    const body = await req.json();
    const { prompt, amount = 1, resolution = "512x512" } = body;

    if (!userId) {
      return new NextResponse("Unauthorized", { status: 401 });
    }

    if (!openai.apiKey) {
      return new NextResponse("OpenAI API Key not configured", { status: 500 });
    }

    if (!prompt) {
      return new NextResponse("Prompt is required", { status: 400 });
    }

    // Check if amount is a valid number
    const numAmount = parseInt(amount, 10);
    if (isNaN(numAmount) || numAmount < 1) {
      return new NextResponse("Invalid amount", { status: 400 });
    }

    const response = await openai.images.generate({
      model: "dall-e-2",
      prompt: prompt,
      n: numAmount,
      size: resolution,
    });

    // Log the entire response for debugging
    console.log("OpenAI API Response:", response);

    // Extract URLs safely
    let urls = response.data?.map((item) => item.url);
    if (!urls || urls.length === 0) {
      return new NextResponse("No images generated", { status: 404 });
    }
    console.log('urls', urls)
    return NextResponse.json(urls);
    
  } catch (error) {
    console.error("[IMAGE_ERROR]", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}

------------

IMAGE ROUTE page:

 //..other code here (up until this point)-

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      setImages([])

      const response = await axios.post("/api/image", values);
      // console.log('FULL RE:', response)
      const urls = response.data;
      setImages(urls)
      console.log(urls)
      form.reset();
    } catch (error: any) {
      // TODO: Open Pro Modal
      console.log(error);
    } finally {
      router.refresh();
    }
  };

  return (

    //..divs returning forms and formfield up until this point remain unchanged (--)

      </div>
      <div className="space-y-4 mt-4">
        {isLoading && (
          <div className="p-20">
            <Loader />
          </div>
        )}
        <div className="flex flex-col-reverse gap-y-4">
          {images.length === 0 && !isLoading && (
            <Empty label="No Images Generated."/>
          )}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:gird-cols-4 gap-4 mt-8">
            {images.map((url, index) => (
              <Card key={index} className="rounded-lg overflow-hidden">
                <div className="relative aspect-square">
                  <Image 
                  alt="Image"
                  fill
                  src={url}/>
                </div>
                <CardFooter className="p-2">
                  <Button onClick={() => window.open(url)} variant='secondary' className="w-full">
                    <Download className="h-4 w-4 mr-2"/>
                    Download
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ImagePage;